#! /usr/bin/env python3

import configparser
from datetime import datetime, timezone
from dateutil.parser import parse
import getpass
import googleapiclient.discovery
import os
import socket
import subprocess
import time

PROJECT = None
ZONE = None
TIMEOUT = None
TIMEOUT_KEY = None
CREDENTIALS = None
TIME_UNITS = {'m': 1, 'h': 60, 'd': 1440} # allowed time units and conversion to minutes


def list_instances(compute):
    result = compute.instances().list(project=PROJECT, zone=ZONE).execute()
    return result['items']


def get_creation_timestamp(instance):
    return parse(instance.get('creationTimestamp'))


def delete_instance(compute, name):
    return compute.instances().delete(
        project=PROJECT,
        zone=ZONE,
        instance=name).execute()


def wait_for_operation(compute, operation):
    for i in range(1, 60):
        result = compute.zoneOperations().get(
            project=PROJECT,
            zone=ZONE,
            operation=operation).execute()

        if result.get('status') == 'DONE':
            print('Operation done with the result: {}'.format(result))
            if 'error' in result:
                raise Exception(result.get('error'))
            return result

        print('Waiting until operation is done: attempt {}'.format(i))
        time.sleep(2)


def get_hostname():
    return socket.gethostname()


def time_expression_to_minutes(expression):
    if not expression or len(expression) < 2:
        print('Invalid expression, time and unit are expected, using default timeout')
        return TIMEOUT

    unit = expression[-1]
    count = expression[:-1]

    if unit not in TIME_UNITS.keys():
        print('Invalid time unit {}, using default timeout'.format(unit))
        return TIMEOUT

    try:
        return int(count) * TIME_UNITS.get(unit)
    except:
        print('Invalid count {}, using default timeout'.format(count))
        return TIMEOUT


def set_credentials_path():
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = CREDENTIALS
    print('reading credentials from: {}'.format(os.environ['GOOGLE_APPLICATION_CREDENTIALS']))


def set_global_configuration():
    config_file = os.path.join(os.environ.get('SNAP_COMMON'), 'config.ini')
    config = configparser.ConfigParser()
    config.read(config_file)

    global PROJECT, ZONE, TIMEOUT, TIMEOUT_KEY, CREDENTIALS
    PROJECT = config.get('DEFAULT', 'project')
    ZONE = config.get('DEFAULT', 'zone')
    TIMEOUT = config.getint('DEFAULT', 'timeout')
    TIMEOUT_KEY = config.get('DEFAULT', 'haltkey')
    CREDENTIALS = config.get('DEFAULT', 'credentials')


def main():
    # Read config file and set global variables
    set_global_configuration()

    # Get credentials from the environment and config the gcloud client
    set_credentials_path()
    compute = googleapiclient.discovery.build('compute', 'v1')
    instances = list_instances(compute)
    operations = []

    # Get current hostname used to avoid auto-kill the gce cleaner
    current_name = get_hostname()
    print('Current instance: {}'.format(current_name))
    print('------------------------------------------')

    # Iterate over all the running instances
    now = datetime.now(timezone.utc)
    for instance in instances:
        instance_name = instance.get('name')
        print('Checking instance: {}'.format(instance_name))

        # This will only work on gce where we need to avoid the current instance is killed
        if current_name == instance_name:
            print('Skipping current instance')
            continue

        # Get instance creation time
        creation_time = get_creation_timestamp(instance)
        print('Instance creation time: {}'.format(creation_time))

        # Calculate running time for the instance
        elapsed_time = now - creation_time
        minutes_running = elapsed_time.total_seconds() / 60
        print('Minutes running: {}'.format(minutes_running))

        # Get the timeout in minutes for the instance
        timeout_expression = instance.get('labels').get(TIMEOUT_KEY)
        instance_timeout_mins = time_expression_to_minutes(timeout_expression)
        print('Instance timeout on minutes: {}'.format(instance_timeout_mins))

        # Delete the instances which are running more than de timeout
        if minutes_running > instance_timeout_mins:
            print('Deleting instance: {}, running longer than threshold: {}'.format(
                instance_name, instance_timeout_mins))
            operation = delete_instance(compute, instance_name)
            operations.append(operation)

        print('------------------------------------------')

    # Iterate operations and until are done
    for operation in operations:
        wait_for_operation(compute, operation.get('name'))


if __name__ == '__main__':
    main()
